#!/bin/bash
trap "rm -f temp* returnTemp* fileStdIn*; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

columnCount=0
rowCount=0

#tempfiles
fileStdIn="fileStdIn$$"
returnTemp="returnTemp$$"
temp1="temp1$$"
temp2="temp2$$"
tempMultF="tempMultF$$"
tempCC="tempCC$$"
tempRC="tempRC$$"
tempDataPath="tempDataPath$$"
tempAvalues="tempAvalues$$"
tempBvalues="tempBvalues$$"
tempM="tempM$$"
tempMfinal="tempMfinal$$"
tempMean="tempMean$$"
tempPrint="tempPrint$$"
tempLineA="tempLineA$$"
tempLineB="tempLineB$$"


###############################################################################
# Begin helper functions
#   perror() - prints error messages
#   dims() - Prints row and column dimensions of matrix
#   transpose() - prints the transpose of the matrix
#   mean() - prints a row vector mean of the input matrix, rounds to nearest integer
#   add() - prints sum of two matrices
#   multiply() - prints product of two matrices
###############################################################################

function perror(){
	# NAME
	#   perror - print a stack trace and error message
	# SYNOPSIS
	#   perror [STRING]
	# DESCRIPTION
	#   Echoes the STRING(s) to standard error.
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)

	echo -en "\e[31mERROR\e[0m: " >&2
	[ $# -gt 0 ] && echo "$*" >&2
	exit 1
}

function dims(){
	# NAME
	#   dims - dimensions of a matrix
	# SYNOPSIS
	#   dims [FILENAME]
	# DESCRIPTION
	#   Prints the dimensions of a matrix 
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)
	
	echo "$3 $2"
	rm -f temp*
	exit 0
}

function transpose(){
	# NAME
	#   transpose - transposes a matrix
	# SYNOPSIS
	#   transpose [FILENAME]
	# DESCRIPTION
	#   Prints the transpose of a matrix 
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)
	
	i=1

	if [[ ! -e $1 ]]
	then
		perror "File does not exist"
	elif [[ ! -r $1 ]]
	then
		perror "File is unreadable"
	fi
	
	# While i is less than number of values
	while [[ $i -le $2 ]]
	do
		cut -f $i $1 > tempCC
		(( i++ ))
		cat tempCC | tr '\n' '\t' >> tempRC
		echo "" >> tempRC
	done
	
	# Remove trailing tab
	sed 's/[[:blank:]]*$//' tempRC > tempCC
	
	#If there is a 3rd argument, '45' is a placeholder signal for this
	# return to calling function with matrix transpose in returnTemp
	if [ "$4" == "45" ]
	then
		cat tempCC > returnTemp
		rm -f temp*
		return 0
	# Else print transpose and exit
	else
		cat tempCC
		rm -f temp*
		exit 0
	fi
}


function mean(){
	# NAME
	#   mean - mean values of a matrix
	# SYNOPSIS
	#   mean [FILENAME]
	# DESCRIPTION
	#   Prints a row vector mean of the input matrix, rounds to nearest integer
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)
	
	i=1
	j=0
	total=0
	# While i is less than number of values, get the first fields 
	# and remove newlines replacing with tabs
	while [[ $i -le $2 ]]
	do
		cut -f $i $1 > tempCC
		(( i++ ))
		cat tempCC | tr '\n' '\t' >> tempRC
		echo "" >> tempRC
	done
	
	# Remove trailing tab
	sed 's/[[:blank:]]*$//' tempRC > tempCC
	
	# While reading values from tabbed line, total values and find mean
	while read meannum
	do
		for val in $meannum
		do
			total=$(( $total + $val ))		
			(( j++ ))
		done
	
		total=$(( ($total + ($j/2)*( ($total>0)*2-1 )) / $j ))
		echo $total >> tempMean
		total=0
		j=0
	done < tempCC
	
	# Remove newlines and print means as a single row with tab spacing
	cat tempMean | tr '\n' '\t' >> tempPrint
	sed 's/[[:blank:]]*$//' tempPrint > tempCC
	echo "" >> tempCC
	cat tempCC
	rm -f temp*
	exit 0
}

function add(){
	# NAME
	#   add - sums the values of two matrices
	# SYNOPSIS
	#   add [FILENAME][FILENAME]
	# DESCRIPTION
	#   Prints sum of two matrices
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)
	
	# Get column and row counts of 1st file
	while read myLine
	do
		echo $myLine >> temp1
		rowCount1=$(( $rowCount1 + 1 ))

		if [[ $rowCount1 == 1 ]]
		then
			for val in $myLine
			do
				colCount1=$(( $colCount1 + 1 ))
			done
		fi
	done < $1
	
	# Get column and row counts of 2nd file
	while read myLine
	do
		echo $myLine >> temp2
		rowCount2=`expr $rowCount2 + 1`

		if [[ $rowCount2 == 1 ]]
		then
			for val in $myLine
			do
				colCount2=$(( $colCount2 + 1 ))
			done
		fi
	done < $2

	# If the matrices are compatible for addition (i.e. equal row counts and column counts)
	if [ $rowCount1 -eq $rowCount2 ] && [ $colCount1 -eq $colCount2 ]
	then	
		i=1
		# Read both files and add elements respective to matrix positioning
		while IFS= read -r aline && IFS= read -r bline <&3
		do
			echo $aline > tempAvalues
			echo $bline > tempBvalues
			cat tempAvalues | tr ' ' '\t' > temp1
			cat tempBvalues | tr ' ' '\t' > temp2
	
			while [ $i -le $colCount1 ]
			do
				onea=$(cut -f $i temp1)
				oneb=$(cut -f $i temp2)
				valueadd=`expr $onea + $oneb`
				echo $valueadd >> tempvalues
				(( i++ ))
			done
	
			cat tempvalues | tr '\n' '\t' >> tempM
			i=1
			sed 's/[[:blank:]]*$//' tempM >> tempMfinal
			echo "" >> tempMfinal
			rm -f tempM tempvalues
		done <$1 3<$2
		
		cat tempMfinal
		rm -f temp*
		exit 0

	# Else the matrices cannot be added
	else
		rm -f temp*
		perror "Error, matrices cannot be added."
	fi	
}

function multiply(){
	# NAME
	#   multiply - multiplies values of two matrces
	# SYNOPSIS
	#   multiply [FILENAME][FILENAME]
	# DESCRIPTION
	#   Prints product of two matrices
	# AUTHOR
	#   Written by Deirdre Moran (morand@oregonstate.edu)
	
	# Get row and column counts of first file
	while read myLine
	do
		echo $myLine >> temp1
		rowCount1=$(( $rowCount1 + 1 ))
		
		if [[ $rowCount1 == 1 ]]
		then
			for val in $myLine
			do
				colCount1=$(( $colCount1 + 1 ))
			done
		fi
	done < $1

	# Get row and column counts of second file
	while read myLine
	do
		#echo $myLine >> temp2
		rowCount2=`expr $rowCount2 + 1`
		if [[ $rowCount2 == 1 ]]
		then
			for val in $myLine
			do
				colCount2=$(( $colCount2 + 1 ))
			done
		fi
	done < $2
	
	# If matrices are incompatible for multiplication
	# i.e. column count of 1st file does not equal row count of 2nd file
	if [ $colCount1 -ne $rowCount2 ]
	then
		rm -f temp*
		perror "Matrices cannot be multiplied"
	# Else they are compatible for multiplication
	else	
		#Call transpose function to prepare matrix for multiplying
		transpose $2 $colCount2 $rowCount2 45	

		# Returned matrix from transpose is in file returnTemp
		j=1
		aXb=0
	
		#outer loop for 1st matrix, read line by line
		while read aline     
		do
			# Put line into temporary file
			echo $aline > tempLineA
			cat tempLineA | tr ' ' '\t' > tempCC
			sed 's/[[:blank:]]*$//' tempCC > tempLineA

			# Inner loop for second matrix
			while read bline
			do
				echo $bline > tempLineB
				cat tempLineB | tr ' ' '\t' > tempRC
				sed 's/[[:blank:]]*$//' tempRC > tempLineB

				while [ $j -le $colCount1 ]
				do
					onea=$(cut -f $j tempLineA)
					oneb=$(cut -f $j tempLineB)
					valtempMult=`expr $onea \* $oneb`
					aXb=`expr $aXb + $valtempMult`
					(( j++ ))
				done			

				j=1	
				echo $aXb >> tempMultF
				aXb=0
			done < returnTemp
			
			cat tempMultF | tr '\n' '\t' > temp1
			sed 's/[[:blank:]]*$//' temp1 >> tempM
			echo "" >> tempM
			rm -f temp1 tempMultF
		done <$1 #3<returnTemp
	
		cat tempM
		rm -f temp* returnTemp 
		exit 0
	fi	
}


###############################################################################
# End helper functions                                                        #
# Begin error checking and script                                             #
###############################################################################

###############################################################################
#Error checking								      #
###############################################################################
# If the command is bad (i.e. not one of our operations)
if [ "$1" != "add" ] && [ "$1" != "transpose" ] && [ "$1" != "multiply" ] && [ "$1" != "mean" ] && [ "$1" != "dims" ]
then
	perror "Bad command"

# If there are too many arguments for dims, error
elif [ "$#" == "3" ] && [ $1 == "dims" ]
then
	perror "too many arguments for this operation"

# If there are too many arguments for transpose, error
elif [ "$#" == "3" ] && [ $1 == "transpose" ]
then
	perror "too many arguments for this operation"

# If there are too many arguments for mean, error
elif [ "$#" == "3" ] && [ $1 == "mean" ]
then
	perror "too many arguments for this operation"

# If there is not a 3rd argument for add, error 
elif [ ! "$3" ] && [ "$1" == "add" ]
then
	perror "too few arguments for this operation"

# If there is not a 3rd arugument for multiply, error
elif [ ! $3 ] && [ $1 == "multiply" ]
then
	perror "too few arguments for this operation"

###############################################################################
# Read from standard in							      #
###############################################################################
# If there is only argument, read from stdin
elif [[ "$#" == "1" ]]  
then
	fileStdIn="/dev/stdin"
	while read anum
	do
		mystring=$anum
		for num in $mystring
		do
			echo $num >> temp1
		done
		cat temp1 | tr '\n' '\t' >> temp2
		rm -f temp1	
		echo "" >> temp2	
	done < $fileStdIn	

	if [ ! -e temp2 ]
	then
		$1 0 0
	else
		sed 's/[[:blank:]]*$//' temp2 > temp1
		while read myLine
		do
			rowCount=`expr $rowCount + 1`
			if [[ $rowCount == 1 ]]
			then
				for val in $myLine
				do
					columnCount=$(( $columnCount + 1 ))
				done
			fi
		done < temp2
		
		# Call function and pass file and dimensions
		$1 temp1 "$columnCount" "$rowCount"
	fi
###############################################################################
# Read from file(s)							      #
###############################################################################
else
	# If the first file does not exist, error
	if [[ ! -e $2 ]]
	then
		perror "File $2 does not exist"
	fi
	# If there are two files and the 2nd does not exist, error
	if [ $3 ] && [ ! -e $3 ]
	then
		perror "File $3 does not exist"	
	fi
	
	# If there is only one file to process	
	if [ "$#" == "2" ]
	then 
		while read myLine
		do
			rowCount=`expr $rowCount + 1`
			if [[ $rowCount == 1 ]]
			then
				for val in $myLine
				do
					columnCount=$(( $columnCount + 1 ))
				done
			fi
		done < $2
		tempDataPath=$2
		# Call functions and pass dimensions
		$1 $tempDataPath "$columnCount" "$rowCount"
	
	# Else we have two files to process, call function and pass both files
	else
		$1 $2 $3 
	fi	
fi

